package sequencer

import "github.com/sig-0/go-ibft/message"

// MessageFeed provides an asynchronous way to receive consensus messages. In addition to
// listening for any type of message in any particular view, the higherRounds flag provides an option
// to include messages from higher rounds as well.
//
// CONTRACT:
//
// 1. any message is valid:
//   - no required fields missing
//   - signature is valid (was generated by Sender)
//
// 2. all messages are considered unique (there cannot be 2 or more messages from the same sender)
type MessageFeed interface {
	// SubscribeProposal returns the MsgProposal subscription for given view(s)
	SubscribeProposal(sequence, round uint64, higherRounds bool) (chan func() []*message.MsgProposal, func())

	// SubscribePrepare returns the MsgPrepare subscription for given view(s)
	SubscribePrepare(sequence, round uint64, higherRounds bool) (chan func() []*message.MsgPrepare, func())

	// SubscribeCommit returns the MsgCommit subscription for given view(s)
	SubscribeCommit(sequence, round uint64, higherRounds bool) (chan func() []*message.MsgCommit, func())

	// SubscribeRoundChange returns the MsgRoundChange subscription for given view(s)
	SubscribeRoundChange(sequence, round uint64, higherRounds bool) (chan func() []*message.MsgRoundChange, func())
}
